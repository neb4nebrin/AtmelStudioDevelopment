;
; BlinkAsm.asm
;
; Created: 2018/11/06 18:04:49
; Author : neb4nebrin
;

; ArduinoのBlinkスケッチと同じ様に配線しようと考えると、
; Arduino Uno Rev.3でのLED_BUILTINは、digital 13pinとなる。
; これをATmega328P-PUのピン配置で読み替えると、PB5となる。
; しかし、データシートによるとPB5(SCK/PCINT5)と書かれており、
; このピンは、ISP用に使われている事が判る。
; よって本プログラムでは、PB5からPD5に出力先を変更する。
; よってPortDを初期化しなくてはならないので、PD5を出力に設定する。
	sbi		ddrd,pd5

; メインループ処理解説：
; PD5をオン->1秒遅延->PD5をオフ->1秒遅延->最初に戻る
MainLoop:
	sbi		portd,pd5
	rcall	DelayLoop
	cbi		portd,pd5
	rcall	DelayLoop
	rjmp	MainLoop

; サブルーチン解説の前に：
;
; 時間指定の遅延の考え方：
; 16MHzで動作するATmega328P-PUは、1秒間に16,000,000サイクルの命令を実行できる。
; つまり1秒待機するという事は、16,000,000サイクル分の命令を無駄に実行させれば良い。
; 実際に16,000,000きっちり無駄にするには、まずループプログラムを書いた後に、
; その総処理サイクル数を求めて、ループ回数を調整する必要がある。
; なおこの考え方は、水晶が必ず正確に16MHzを発振する事が前提の考え方なので、
; 個体差や温度等による影響で、実際にはかなり誤差があると思われる。
; よって、多少サイクル回数が増減しても、問題はないと思われる。

; 実行する回数が指定されたループの考え方：
; 汎用レジスタは8bitの大きさなので、[0 - 255]までの最大256回しか実行出来ない。
; しかし、ループを入れ子とすると、最大256回 * 256回 = 65536回実行出来る。
; もしこれでも足りないのであれば、さらに桁を足していく事を繰り返す。



; 遅延ループ処理解説：
; まず基本として、各命令のサイクル数を調べる。
; ldi/nop/decは1サイクル命令。
; brneは2サイクル命令
; retは4サイクル命令。
;
; InnerLoop3ラベルから、brne InnerLoop3迄の命令サイクルは、計4サイクル。
; その外側のInnerLoop2ループは、InnerLoop3の分を除くと、計4サイクル。
; さらにその外側のInnerLoop1ループは、同様に計4サイクル。
; 残るサブルーチンの最初と最後は、計5サイクル。
;
; 内部ループ3は、r22 * r21 * r20回実行される。
; 内部ループ2は、r21 * r20回実行される。
; 内部ループ1は、r20回実行される。
; よって内部ループの総サイクル数は、以下の計算式で求められる。
; 内部ループの総サイクル数 =
;	(r22 * r21 * r20 * 4) + (r21 * r20 * 4) + (r20 * 4)
;
; これより総サイクル数は、以下の通りとなる。
; 総サイクル数 = 
;	5 + (r22 * r21 * r20 * 4) + (r21 * r20 * 4) + (r20 * 4)
;
; このコードに設定した値で計算すると、
; 総サイクル数 =
;	5 + (249 * 250 * 64 * 4) + (250 * 64 * 4) + (64 * 4) = 16,000,261
;
; もしお使いのクロック周波数が異なるのであれば、これらの考え方で初期値を再定義する事。
DelayLoop:
	ldi		r20,64
InnerLoop1:
	ldi		r21,250
InnerLoop2:
	ldi		r22,249
InnerLoop3:
	nop
	dec		r22
	brne	InnerLoop3
	dec		r21
	brne	InnerLoop2
	dec		r20
	brne	InnerLoop1
	ret
